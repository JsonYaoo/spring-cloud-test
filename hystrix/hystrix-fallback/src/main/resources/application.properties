spring.application.name=hystrix-consumer

server.port=50000

# 允许Bean同名覆盖: 不配置会报"feign-client.FeignClientSpecification"错误, 因为Feign的代理对象名称是使用里面的服务属性拼凑的, 所以可以配置允许Bean同名覆盖
spring.main.allow-bean-definition-overriding=true

eureka.client.serviceUrl.defaultZone=http://localhost:20000/eureka/

# 设置Ribbon的超时与重试策略, 经测试Ribbon可与Hystrix会共同作用(如果Ribbon的比Hystrix的大, 当实际超时时长大于两者阈值时, 会出现既超时降级又超时重试, 因为不同JVM不能打断线程),
# 所以, 生产里建议给Hystrix设置大点的超时参数, 这里做测试就设置Ribbon比较大, 但如果必须让Hystrix生效, 那可以指定方法级别的降级(同JVM内可以打断线程)
# Ribbon指定服务的超时策略: 请求服务的连接超时时间: Http连接所花费的时间(ms)
feign-client.ribbon.ConnectTimeout=1000
# Ribbon指定服务的超时策略: 服务的业务处理超时时间(ms) => 这里设置Ribbon的超时比Hystrix的大, 防止Ribbon妨碍Hystrix的超时测试
feign-client.ribbon.ReadTimeout=8000

# Ribbon指定服务的重试策略: 允许在所有Http Method都进行重试策略(Get/Post/Put/Delete...)
feign-client.ribbon.OkToRetryOnAllOperations=false
# Ribbon指定服务的重试策略: 每台机器最大的服务超时重试次数 => 因此, 每台机器的请求次数 = 1 + 2 = 3次
feign-client.ribbon.MaxAutoRetries=0
# Ribbon指定服务的重试策略: 服务重试超时时, 还可以再重试几台机器 => 因此, 一共可以请求机器数 = 1 + 2 = 3台, 如果只有1台机器, 那么会继续请求该台机器
feign-client.ribbon.MaxAutoRetriesNextServer=0
# 因此, 一次服务请求的最大超时次数 = (1000 + 1000) * (1 + 2) * (1 + 2) = 18000ms = 18s

# 开启Feign下面的Hystrix功能(默认为false)
feign.hystrix.enabled=true
# 是否开启Hystrix服务降级功能(默认为true)
hystrix.command.default.fallback.enabled=true

# Hystrix超时策略: 全局超时开关配置
hystrix.command.default.execution.timeout.enabled=true
# Hystrix超时策略: 设置超时时间 => 经测试, 如果Ribbon不配置超时时间, 则会使用默认的超时时间1s, 使得Hystrix超时配置不生效
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=2000
# Hystrix超时策略: 超时以后终止线程 => 在Hystrix配置的2s超时后, 并不会触发终止线程!!!
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=true
# Hystrix超时策略: 取消线程后终止线程 => 在Hystrix配置的2s超时后, 并不会触发终止线程!!!
hystrix.command.default.execution.isolation.thread.interruptOnCancel=true
# 1. Hystrix超时策略: 指定服务中某个方法的超时配置(优先级比全局的高)
hystrix.command.IHystrixFallbackService#timeout(int).execution.isolation.thread.timeoutInMilliseconds=3000
# 2. Hystrix超时策略: 指定服务中某个方法的超时配置(优先级比全局的高) -> HystrixCommand
hystrix.command.requestCache.execution.isolation.thread.timeoutInMilliseconds=3000

# Hystrix RequestCache策略: 打开RequestCache(默认为true)
hystrix.command.default.requestCache.enabled=true

# Hystrix熔断器全局配置: 是否启用熔断器功能(默认为true)
hystrix.command.default.circuitBreaker.enabled=true
# Hystrix熔断器全局配置: 是否强制开启熔断器开关(默认为false): 开启开关后熔断器会强制进入open状态
hystrix.command.default.circuitBreaker.forceOpen=false
# Hystrix熔断器全局配置: 是否强制关闭熔断器开关(默认为false): 开启开关后熔断器会强制进入closed状态
hystrix.command.default.circuitBreaker.forceClosed=false
# Hystrix熔断器全局配置: 熔断器请求统计的时间窗口(滑动窗口): 以每20s作为统计窗口, 来判断里面的请求, 默认为5000即5s钟
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=20000
# Hystrix熔断器全局配置: 请求阈值, 开启熔断器熔断判断的前提条件: 在一定时间窗口内, 请求达到X个以后才开始进行熔断判断逻辑, <=X个无论是否失败都不会进入熔断判断逻辑(判断熔断器状态 & 判断失败请求比例)
hystrix.command.default.circuitBreaker.requestVolumeThreshold=5
# Hystrix熔断器全局配置: 失败请求比例阈值(关键参数), 用于判断熔断器是否需要开启: 在一定时间窗口内, 当失败请求比例达到50%时(之前的那X个也会用于统计当中), 熔断器进入open状态
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
# Hystrix熔断器全局配置: half-open半开状态到达的时间窗口(要比统计的时间窗口小): 当熔断器开启熔断时, 经过X毫秒j进入半开状态(用于重新测试1个请求是否能够成功, 成功则熔断器进入closed状态, 否则继续保持open状态, 等待下一个half-open窗口到来)
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=15000
# Hystrix熔断器还可以进行指定服务方法的配置(像上面那样, 有3种方式)