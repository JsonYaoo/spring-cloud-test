# 基于请求速率的限流: IP地址(单机级别)的限流
# 1) $binary_remote_addr: binary_目的是缩写IP地址, 减少内存占用; remote_addr: 表示通过IP地址来限流
# 2) zone=iplimit:20m: 建立一块20MB的内存区域, 用于记录访问频率信息
# 3) rate=1r/s: 设置限流速率
limit_req_zone $binary_remote_addr zone=iplimit:20m rate=10r/s; 

# 基于请求速率的限流: 服务器级别的限流: 通常是最大的, 但这里测试所以设置了最小
limit_req_zone $server_name zone=serverlimit:10m rate=1r/s;

# 基于连接数的限流: IP地址(单机级别)的限流
limit_conn_zone $binary_remote_addr zone=perip:20m;

# 基于连接数的限流: 服务器级别的限流
limit_conn_zone $server_name zone=perserver:20m;

   server {
        server_name www.imooc-training.com;

        location /access-limit/ {
		proxy_pass http://192.168.1.5:10086/;
		# 基于请求速率的限流: IP地址(单机级别)的限流
		# 1) zone=iplimit: 引用limit_req_zone中的zone变量
		# 2）burst=2: 设置一个大小为2的缓冲区, 当大量请求到来, 超过限流频率时, 其中2个请求会放入缓冲区域中
		# 3) nodelay: 表示缓冲区满了以后, 直接返回503异常
		limit_req zone=iplimit burst=2 nodelay;

		# 基于请求速率的限流: 服务器级别的限流: 通常是最大的, 但这里测试所以设置了最小
		limit_req zone=serverlimit burst=1 nodelay;
		
		# 基于连接数的限流: 服务器级别的限流
		limit_conn perserver 100;

		# 基于连接数的限流: IP地址(单机级别)的限流
		limit_conn perip 1;

		# 异常情况: 自定义返回码(默认是503)
		limit_req_status 504;
		limit_conn_status 504;
        }

	# 下载速率限制
	location /download/ {
		# 100m以后才触发限流
		limit_rate_after 100m;
		# 限制下行速率
		limit_rate 256k;
	}
    }
