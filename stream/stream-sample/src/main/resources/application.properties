spring.application.name=stream-sample
server.port=63000

# Rabbitmq连接字符串
spring.rabbitmq.host=192.168.1.111
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# 配置Stream自定义广播消息Topic: 绑定消费者、生产者信道到broadcastTopic
spring.cloud.stream.bindings.broadcastTopic-consumer.destination=broadcastTopic
spring.cloud.stream.bindings.broadcastTopic-producer.destination=broadcastTopic

# 测试单播: 绑定消费者、生产者信道到groupTopic
spring.cloud.stream.bindings.groupTopic-consumer.destination=groupTopic
spring.cloud.stream.bindings.groupTopic-producer.destination=groupTopic

# 测试单播: 配置消费者分组 => 实际上是一个组一个queue, 每个queue有多个Consumer
spring.cloud.stream.bindings.groupTopic-consumer.group=GroupA

# 测试单播: 配置消息分区 => 经测试可知, 消息分区和消费组可以合起来使用, 消费组可用来实现单播(组内轮训消费), 消息分区可用来隔离消费组(只有满足条件即SpEL匹配的消费组才能消费消息)
# 打开消费者的消费分区功能
spring.cloud.stream.bindings.groupTopic-consumer.consumer.partitioned=true
# 指定当前消费者实例的总数
spring.cloud.stream.instance-count=2
# 指定当前消费者实例的索引号, 最大值为count-1, 用于测试消息分区
spring.cloud.stream.instance-index=1
# 指定生产者拥有两个消息分区
spring.cloud.stream.bindings.groupTopic-producer.producer.partition-count=2
# SpEL => Key Resolver解析, 表示只有节点为1的消费者才能消费消息, 即SpEL匹配才能消费
spring.cloud.stream.bindings..groupTopic-producer.producer.partition-key-expression=1

# 测试延迟消息: 绑定消费者、生产者信道到delayedTopic
spring.cloud.stream.bindings.delayedTopic-consumer.destination=delayedTopic
spring.cloud.stream.bindings.delayedTopic-producer.destination=delayedTopic

# 测试延迟消息: 生产者允许生成延迟交换机与延迟队列(都只有一个)
spring.cloud.stream.rabbit.bindings.delayedTopic-producer.producer.delayed-exchange=true

# 测试测试异常重试(单机版), 即在Consumer本地重试, 而不会发回给Rabbitm: 绑定消费者、生产者信道到exceptionTopic
spring.cloud.stream.bindings.exceptionTopic-consumer.destination=exceptionTopic
spring.cloud.stream.bindings.exceptionTopic-producer.destination=exceptionTopic

# 测试测试异常重试(单机版), 即在Consumer本地重试, 而不会发回给Rabbitm: 配置本机重试次数, 次数为1代表不重试
spring.cloud.stream.bindings.exceptionTopic-consumer.consumer.max-attempts=2

# 测试异常重试(联机版), 消费者会重新生成把消息投递回队列尾部: 绑定消费者、生产者信道到requeueTopic
spring.cloud.stream.bindings.requeueTopic-consumer.destination=requeueTopic
spring.cloud.stream.bindings.requeueTopic-producer.destination=requeueTopic

# 测试异常重试(联机版), 消费者会重新生成把消息投递回队列尾部: 对指定Consumer配置重新入队
#spring.cloud.stream.rabbit.bindings.requeueTopic-consumer.consumer.requeueRejected=true
# 默认全局开启Direct重新入队(不过会被Consumer重试覆盖)
#spring.rabbitmq.listener.direct.default-requeue-rejected=true
# 所以配置Consumer只能重试1次
spring.cloud.stream.bindings.requeueTopic-consumer.consumer.max-attempts=1
# 测试不同分组的消费者消费Requeue消息 => 实际上Group、Topic的名称最好都用-作为连接, 而不是驼峰标识
spring.cloud.stream.bindings.requeueTopic-consumer.group=requeue-group

# 测试死信队列Topic: 绑定消费者、生产者信道到dlqTopic
spring.cloud.stream.bindings.dlqTopic-consumer.destination=dlqTopic
spring.cloud.stream.bindings.dlqTopic-producer.destination=dlqTopic
spring.cloud.stream.bindings.dlqTopic-consumer.consumer.max-attempts=2
spring.cloud.stream.bindings.dlqTopic-consumer.group=dlq-group
# 开启死信队列(默认名称为${dlqTopic}.dlq, 复杂的需要自己指定DLK), 允许指定Consumer绑定DLQ
# => rabbitmq-plugins enable rabbitmq_shovel rabbitmq_shovel_management, 管理控制台开启重推消息其他队列功能
spring.cloud.stream.rabbit.bindings.dlqTopic-consumer.consumer.auto-bind-dlq=true

# 测试异常降级, 自定义异常逻辑 + 接口升版: 绑定消费者、生产者信道到dlqTopic
spring.cloud.stream.bindings.fallbackTopic-consumer.destination=fallback-Topic
spring.cloud.stream.bindings.fallbackTopic-producer.destination=fallback-Topic
spring.cloud.stream.bindings.fallbackTopic-consumer.consumer.max-attempts=2
spring.cloud.stream.bindings.fallbackTopic-consumer.group=fallback-group
# errors 是规定写死的
# inputChannel => fallback-Topic.fallback-group.errors